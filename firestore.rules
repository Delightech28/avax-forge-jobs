rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Saved jobs subcollection
      match /saved_jobs/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Jobs
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company';
      allow update, delete: if request.auth != null &&
        resource.data.posted_by == request.auth.uid;
    }

    // Companies (public profiles)
    match /companies/{companyId} {
      // Public read for company profiles so listings and public pages can show company info
      allow read: if true;
      // Creation and updates should be limited to authenticated company users in production
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company';
    }

    // Applications collection rules (if you have one)
    match /applications/{applicationId} {
      // Users can read their own applications
      allow read: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         resource.data.job_owner == request.auth.uid);
      
      // Only user role can create applications
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
      
      // Only the applicant or job owner can update applications
      allow update: if request.auth != null && 
        (resource.data.user_id == request.auth.uid || 
         resource.data.job_owner == request.auth.uid);
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && 
        resource.data.user_id == request.auth.uid;
      
      // Users can create notifications for themselves
      allow create: if request.auth != null && 
        request.resource.data.user_id == request.auth.uid;
      
      // Users can update their own notifications
      allow update: if request.auth != null && 
        resource.data.user_id == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        resource.data.user_id == request.auth.uid;
    }

    // Notification settings per user
    match /notification_settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Messages and conversations
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource.data.sender_id == request.auth.uid || 
         resource.data.recipient_id == request.auth.uid);
    }

    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        (resource.data.participant1_id == request.auth.uid || 
         resource.data.participant2_id == request.auth.uid);
    }

    // Subscribed users for newsletter
    match /subscribed_users/{email} {
      allow create: if true; // Anyone can subscribe
      allow read, update, delete: if request.auth != null && 
        request.auth.token.email == email;
    }
  }
}
